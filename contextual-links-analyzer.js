#!/usr/bin/env node

/**
 * ANALYSEUR DE LIENS CONTEXTUELS
 * D√©tecte automatiquement les opportunit√©s de liens dans le contenu
 */

class ContextualLinksAnalyzer {
  constructor() {
    // Articles internes FlashVoyages (Priorit√© 1)
    this.internalArticles = {
      'Bali': '/bali-guide-nomade-digital',
      'Jakarta': '/jakarta-guide-nomade-digital',
      'Yogyakarta': '/yogyakarta-guide-nomade-digital',
      'Bandung': '/bandung-guide-nomade-digital',
      'Surabaya': '/surabaya-guide-nomade-digital',
      'Indon√©sie': '/indonesie-guide-nomade-digital',
      'Tha√Ølande': '/thailande-guide-nomade-digital',
      'Vietnam': '/vietnam-guide-nomade-digital',
      'Dojo Bali': '/coliving-dojo-bali-guide-complet',
      'Outpost': '/outpost-coliving-bali',
      'Selina': '/selina-coliving-bali'
    };

    // Sites officiels des compagnies (Priorit√© 2)
    this.officialWebsites = {
      'Telkomsel': 'https://www.telkomsel.com',
      'Indosat': 'https://www.indosatooredoo.com',
      'XL': 'https://www.xl.co.id',
      'Tri': 'https://www.tri.co.id',
      'Smartfren': 'https://www.smartfren.com',
      'Gojek': 'https://www.gojek.com',
      'Grab': 'https://www.grab.com',
      'Blue Bird': 'https://www.bluebirdgroup.com',
      'Transjakarta': 'https://transjakarta.co.id',
      'KRL': 'https://www.krl.co.id',
      'Aviasales': 'https://aviasales.com',
      'Hotellook': 'https://hotellook.com',
      'Booking': 'https://booking.com',
      'Agoda': 'https://agoda.com',
      'Airbnb': 'https://airbnb.com'
    };

    // Liens Travelpayouts g√©n√©riques (Priorit√© 3)
    this.travelpayoutsLinks = {
      'vols': 'https://aviasales.com',
      'vol': 'https://aviasales.com',
      'avion': 'https://aviasales.com',
      'compagnie': 'https://aviasales.com',
      'a√©rien': 'https://aviasales.com',
      'billet': 'https://aviasales.com',
      'r√©servation': 'https://aviasales.com',
      'r√©server': 'https://aviasales.com',
      'h√©bergement': 'https://hotellook.com',
      'h√¥tel': 'https://hotellook.com',
      'auberge': 'https://hotellook.com',
      'logement': 'https://hotellook.com',
      'chambre': 'https://hotellook.com',
      'appartement': 'https://hotellook.com',
      'location': 'https://hotellook.com',
      'dormir': 'https://hotellook.com',
      'nuit√©e': 'https://hotellook.com',
      'SIM': 'https://sim-card.com',
      'sim': 'https://sim-card.com',
      't√©l√©phone': 'https://sim-card.com',
      'communication': 'https://sim-card.com',
      'internet': 'https://sim-card.com',
      'donn√©es': 'https://sim-card.com',
      'mobile': 'https://sim-card.com',
      'r√©seau': 'https://sim-card.com',
      'budget': 'https://travelpayouts.com',
      'co√ªt': 'https://travelpayouts.com',
      'prix': 'https://travelpayouts.com',
      'argent': 'https://travelpayouts.com',
      'd√©penses': 'https://travelpayouts.com',
      '√©conomiser': 'https://travelpayouts.com',
      'transport': 'https://transport.com',
      'bus': 'https://transport.com',
      'train': 'https://transport.com',
      'm√©tro': 'https://transport.com',
      'taxi': 'https://transport.com',
      'moto': 'https://transport.com',
      'v√©lo': 'https://transport.com',
      'd√©placement': 'https://transport.com'
    };

    this.color = '#dc2626';
  }

  /**
   * ANALYSER LE CONTENU POUR D√âTECTER LES OPPORTUNIT√âS DE LIENS
   */
  analyzeContent(content) {
    console.log('üîç ANALYSE DU CONTENU POUR LES LIENS CONTEXTUELS');
    console.log('================================================\n');

    const opportunities = [];
    const contentLower = content.toLowerCase();

    // 1. D√©tecter les mots-cl√©s dans le contenu
    const allKeywords = [
      ...Object.keys(this.internalArticles),
      ...Object.keys(this.officialWebsites),
      ...Object.keys(this.travelpayoutsLinks)
    ];

    const foundKeywords = this.findKeywordMatches(contentLower, allKeywords);
    
    if (foundKeywords.length > 0) {
      foundKeywords.forEach(keyword => {
        const linkInfo = this.getBestLink(keyword);
        if (linkInfo) {
          opportunities.push({
            keyword: keyword,
            url: linkInfo.url,
            type: linkInfo.type,
            isInternal: linkInfo.isInternal,
            context: this.extractContext(content, keyword)
          });
          
          console.log(`‚úÖ ${keyword.toUpperCase()}: ${linkInfo.type}`);
          console.log(`   - URL: ${linkInfo.url}`);
          console.log(`   - Type: ${linkInfo.type}`);
        }
      });
    }

    console.log(`\nüìä R√âSULTAT: ${opportunities.length} opportunit√©s d√©tect√©es`);
    return opportunities;
  }

  /**
   * D√âTERMINER LE MEILLEUR LIEN SELON LA PRIORIT√â
   */
  getBestLink(keyword) {
    // Priorit√© 1: Article interne FlashVoyages
    if (this.internalArticles[keyword]) {
      return {
        url: this.internalArticles[keyword],
        type: 'Article interne',
        isInternal: true
      };
    }

    // Priorit√© 2: Site officiel de la compagnie
    if (this.officialWebsites[keyword]) {
      return {
        url: this.officialWebsites[keyword],
        type: 'Site officiel',
        isInternal: false
      };
    }

    // Priorit√© 3: Lien Travelpayouts g√©n√©rique
    if (this.travelpayoutsLinks[keyword]) {
      return {
        url: this.travelpayoutsLinks[keyword],
        type: 'Travelpayouts',
        isInternal: false
      };
    }

    return null;
  }

  /**
   * TROUVER LES MATCHES DE MOTS-CL√âS
   */
  findKeywordMatches(content, keywords) {
    const matches = [];
    
    keywords.forEach(keyword => {
      const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
      const found = content.match(regex);
      if (found) {
        matches.push(keyword);
      }
    });
    
    return matches;
  }

  /**
   * EXTRAIRE LE CONTEXTE AUTOUR D'UN MATCH
   */
  extractContext(content, keyword) {
    const index = content.toLowerCase().indexOf(keyword);
    if (index === -1) return '';
    
    const start = Math.max(0, index - 50);
    const end = Math.min(content.length, index + keyword.length + 50);
    
    return content.substring(start, end).trim();
  }

  /**
   * G√âN√âRER LES LIENS CONTEXTUELS
   */
  generateContextualLinks(opportunities) {
    console.log('\nüîó G√âN√âRATION DES LIENS CONTEXTUELS');
    console.log('====================================\n');

    const links = [];
    
    opportunities.forEach(opportunity => {
      const target = opportunity.isInternal ? '_self' : '_blank';
      const link = `<a href="${opportunity.url}" target="${target}" rel="noopener" style="color: ${this.color}; text-decoration: underline;">${opportunity.keyword}</a>`;
      
      links.push({
        keyword: opportunity.keyword,
        link: link,
        type: opportunity.type,
        isInternal: opportunity.isInternal,
        context: opportunity.context
      });
      
      console.log(`‚úÖ ${opportunity.keyword}: ${opportunity.type}`);
      console.log(`   - ${opportunity.isInternal ? 'Lien interne' : 'Lien externe'}`);
    });

    return links;
  }

  /**
   * INT√âGRER LES LIENS DANS LE CONTENU
   */
  integrateLinks(content, opportunities) {
    console.log('\nüîó INT√âGRATION DES LIENS DANS LE CONTENU');
    console.log('========================================\n');

    let updatedContent = content;
    let linksAdded = 0;

    opportunities.forEach(opportunity => {
      const target = opportunity.isInternal ? '_self' : '_blank';
      const linkWithKeyword = `<a href="${opportunity.url}" target="${target}" rel="noopener" style="color: ${this.color}; text-decoration: underline;">${opportunity.keyword}</a>`;
      
      if (updatedContent.toLowerCase().includes(opportunity.keyword.toLowerCase())) {
        updatedContent = updatedContent.replace(
          new RegExp(`\\b${opportunity.keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi'),
          linkWithKeyword
        );
        linksAdded++;
        console.log(`‚úÖ "${opportunity.keyword}" ‚Üí ${opportunity.type}`);
      }
    });

    console.log(`\nüìä R√âSULTAT: ${linksAdded} liens int√©gr√©s`);
    return updatedContent;
  }

  /**
   * ANALYSER UN ARTICLE COMPLET
   */
  analyzeArticle(articleContent) {
    console.log('üì∞ ANALYSE D\'UN ARTICLE COMPLET');
    console.log('===============================\n');

    // 1. Analyser les opportunit√©s
    const opportunities = this.analyzeContent(articleContent);
    
    if (opportunities.length === 0) {
      console.log('‚ÑπÔ∏è Aucune opportunit√© de lien d√©tect√©e');
      return {
        opportunities: [],
        links: [],
        updatedContent: articleContent
      };
    }

    // 2. G√©n√©rer les liens
    const links = this.generateContextualLinks(opportunities);
    
    // 3. Int√©grer dans le contenu
    const updatedContent = this.integrateLinks(articleContent, opportunities);

    return {
      opportunities: opportunities,
      links: links,
      updatedContent: updatedContent
    };
  }
}

// Export pour utilisation
export default ContextualLinksAnalyzer;

// Test si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  const analyzer = new ContextualLinksAnalyzer();
  
  // Test avec un contenu d'exemple
  const testContent = `
    J'ai r√©serv√© mes vols pour l'Indon√©sie via une compagnie locale.
    L'h√©bergement √©tait excellent dans cet h√¥tel de Jakarta.
    J'ai utilis√© Telkomsel pour internet en Indon√©sie.
    J'ai s√©journ√© au Dojo Bali pendant 2 mois.
    Pour me d√©placer, j'utilisais Gojek et Grab.
    Le budget total √©tait de 2000‚Ç¨ pour 3 mois.
    Le transport local √©tait tr√®s pratique avec les bus.
  `;
  
  console.log('üß™ TEST DE L\'ANALYSEUR');
  console.log('======================\n');
  
  const result = analyzer.analyzeArticle(testContent);
  
  console.log('\nüéØ R√âSULTAT FINAL:');
  console.log('==================');
  console.log(`Opportunit√©s d√©tect√©es: ${result.opportunities.length}`);
  console.log(`Liens g√©n√©r√©s: ${result.links.length}`);
  console.log(`Contenu mis √† jour: ${result.updatedContent !== testContent ? 'Oui' : 'Non'}`);
}
