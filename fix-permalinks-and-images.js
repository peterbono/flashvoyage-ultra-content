import axios from 'axios';

const WORDPRESS_URL = 'https://flashvoyage.com/';
const WORDPRESS_USERNAME = 'admin7817';
const WORDPRESS_APP_PASSWORD = 'GjLl 9W0k lKwf LSOT PXur RYGR';

// Sources d'images Pexels par destination
const PEXELS_IMAGES = {
  'thailande': [
    'https://images.pexels.com/photos/1007657/pexels-photo-1007657.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901209/pexels-photo-2901209.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901210/pexels-photo-2901210.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop'
  ],
  'japon': [
    'https://images.pexels.com/photos/2901209/pexels-photo-2901209.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901210/pexels-photo-2901210.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901211/pexels-photo-2901211.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop'
  ],
  'philippines': [
    'https://images.pexels.com/photos/2901209/pexels-photo-2901209.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901210/pexels-photo-2901210.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901211/pexels-photo-2901211.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop'
  ],
  'coree': [
    'https://images.pexels.com/photos/2901209/pexels-photo-2901209.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901210/pexels-photo-2901210.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901211/pexels-photo-2901211.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop'
  ],
  'vietnam': [
    'https://images.pexels.com/photos/2901209/pexels-photo-2901209.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901210/pexels-photo-2901210.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop',
    'https://images.pexels.com/photos/2901211/pexels-photo-2901211.jpeg?auto=compress&cs=tinysrgb&w=800&h=600&fit=crop'
  ]
};

async function uploadImageFromPexels(imageUrl, filename, altText) {
  try {
    console.log(`üì§ Upload image: ${filename}`);
    
    const imageResponse = await axios.get(imageUrl, {
      responseType: 'arraybuffer',
      timeout: 10000
    });
    
    const formData = new FormData();
    const blob = new Blob([imageResponse.data], { type: 'image/jpeg' });
    formData.append('file', blob, filename);
    
    const uploadResponse = await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/media`, formData, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      },
      headers: {
        'Content-Disposition': `attachment; filename="${filename}"`,
        'Content-Type': 'image/jpeg'
      }
    });
    
    // Ajouter l'alt text
    if (altText) {
      await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/media/${uploadResponse.data.id}`, {
        alt_text: altText
      }, {
        auth: {
          username: WORDPRESS_USERNAME,
          password: WORDPRESS_APP_PASSWORD
        }
      });
    }
    
    console.log(`‚úÖ Image upload√©e: ID ${uploadResponse.data.id}`);
    return uploadResponse.data.id;
    
  } catch (error) {
    console.error(`‚ùå Erreur upload image ${filename}:`, error.message);
    return null;
  }
}

function detectDestinationFromTitle(title) {
  const titleLower = title.toLowerCase();
  
  if (titleLower.includes('thailande') || titleLower.includes('bangkok') || titleLower.includes('tha√Ølande')) {
    return 'thailande';
  } else if (titleLower.includes('japon') || titleLower.includes('tokyo') || titleLower.includes('japon')) {
    return 'japon';
  } else if (titleLower.includes('philippines') || titleLower.includes('manille')) {
    return 'philippines';
  } else if (titleLower.includes('coree') || titleLower.includes('s√©oul') || titleLower.includes('seoul')) {
    return 'coree';
  } else if (titleLower.includes('vietnam') || titleLower.includes('hanoi') || titleLower.includes('ho chi minh')) {
    return 'vietnam';
  } else {
    return 'thailande'; // Par d√©faut
  }
}

async function fixPermalinksAndImages() {
  console.log('üîß Correction des permaliens et ajout d\'images...');
  
  try {
    // 1. D'abord, corriger les param√®tres de permaliens
    console.log('\nüîó Correction des permaliens...');
    
    try {
      // Essayer de mettre √† jour les param√®tres de permaliens
      const permalinkResponse = await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/settings`, {
        permalink_structure: '/%postname%/'
      }, {
        auth: {
          username: WORDPRESS_USERNAME,
          password: WORDPRESS_APP_PASSWORD
        }
      });
      
      console.log('‚úÖ Param√®tres de permaliens mis √† jour');
    } catch (error) {
      console.log('‚ö†Ô∏è  Impossible de modifier les permaliens via API, continuons...');
    }
    
    // 2. R√©cup√©rer tous les articles
    console.log('\nüìÑ R√©cup√©ration des articles...');
    
    const response = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/posts?per_page=100&status=publish`, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      }
    });
    
    const articles = response.data;
    console.log(`üìä ${articles.length} articles trouv√©s`);
    
    // 3. Traiter chaque article
    let processedCount = 0;
    let imageAddedCount = 0;
    
    for (const article of articles) {
      console.log(`\nüìÑ Traitement article ID: ${article.id}`);
      console.log(`   Titre: ${article.title.rendered}`);
      
      // D√©tecter la destination
      const destination = detectDestinationFromTitle(article.title.rendered);
      console.log(`   Destination d√©tect√©e: ${destination}`);
      
      // V√©rifier si l'article a d√©j√† une image featured
      if (article.featured_media > 0) {
        console.log(`   ‚úÖ D√©j√† une image featured (ID: ${article.featured_media})`);
        processedCount++;
        continue;
      }
      
      // Ajouter une image featured
      console.log(`   üì§ Ajout d'une image featured...`);
      
      const imageUrl = PEXELS_IMAGES[destination][Math.floor(Math.random() * PEXELS_IMAGES[destination].length)];
      const filename = `${destination}-${article.id}-${Date.now()}.jpg`;
      const altText = `${article.title.rendered} - Image ${destination}`;
      
      const imageId = await uploadImageFromPexels(imageUrl, filename, altText);
      
      if (imageId) {
        // Mettre √† jour l'article avec l'image featured
        try {
          await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/posts/${article.id}`, {
            featured_media: imageId
          }, {
            auth: {
              username: WORDPRESS_USERNAME,
              password: WORDPRESS_APP_PASSWORD
            }
          });
          
          console.log(`   ‚úÖ Image featured ajout√©e (ID: ${imageId})`);
          imageAddedCount++;
          
        } catch (error) {
          console.error(`   ‚ùå Erreur mise √† jour article: ${error.message}`);
        }
      }
      
      // Mettre √† jour le slug pour corriger les probl√®mes d'URL
      try {
        const cleanSlug = article.title.rendered
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '') // Supprimer les caract√®res sp√©ciaux
          .replace(/\s+/g, '-') // Remplacer les espaces par des tirets
          .replace(/-+/g, '-') // Supprimer les tirets multiples
          .replace(/^-|-$/g, ''); // Supprimer les tirets en d√©but/fin
        
        await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/posts/${article.id}`, {
          slug: cleanSlug
        }, {
          auth: {
            username: WORDPRESS_USERNAME,
            password: WORDPRESS_APP_PASSWORD
          }
        });
        
        console.log(`   ‚úÖ Slug mis √† jour: ${cleanSlug}`);
        
      } catch (error) {
        console.error(`   ‚ùå Erreur mise √† jour slug: ${error.message}`);
      }
      
      processedCount++;
      
      // Pause entre les requ√™tes pour √©viter la surcharge
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log('\nüéâ TRAITEMENT TERMIN√â !');
    console.log('='.repeat(50));
    console.log(`‚úÖ Articles trait√©s: ${processedCount}`);
    console.log(`‚úÖ Images ajout√©es: ${imageAddedCount}`);
    console.log(`‚úÖ Slugs corrig√©s: ${processedCount}`);
    
    // 4. Tester l'acc√®s aux articles apr√®s correction
    console.log('\nüß™ Test d\'acc√®s aux articles corrig√©s...');
    
    if (articles.length > 0) {
      const testArticle = articles[0];
      console.log(`Test d'acc√®s √†: ${testArticle.link}`);
      
      try {
        const testResponse = await axios.get(testArticle.link, {
          timeout: 10000
        });
        
        if (testResponse.status === 200) {
          console.log('‚úÖ Article accessible apr√®s correction');
        } else {
          console.log(`‚ùå Toujours une erreur HTTP: ${testResponse.status}`);
        }
      } catch (error) {
        console.log(`‚ùå Erreur d'acc√®s: ${error.message}`);
        
        // Essayer avec l'URL directe
        const directUrl = `${WORDPRESS_URL}?p=${testArticle.id}`;
        console.log(`Test URL directe: ${directUrl}`);
        
        try {
          const directResponse = await axios.get(directUrl, {
            timeout: 10000
          });
          
          if (directResponse.status === 200) {
            console.log('‚úÖ Article accessible via URL directe');
          } else {
            console.log(`‚ùå Erreur URL directe: ${directResponse.status}`);
          }
        } catch (directError) {
          console.log(`‚ùå Erreur URL directe: ${directError.message}`);
        }
      }
    }
    
    console.log('\nüí° Prochaines √©tapes:');
    console.log('1. V√©rifiez les param√®tres de permaliens dans WordPress Admin');
    console.log('2. Allez dans R√©glages > Permaliens');
    console.log('3. S√©lectionnez "Nom de l\'article" et sauvegardez');
    console.log('4. Testez l\'acc√®s aux articles');
    
  } catch (error) {
    console.error('‚ùå Erreur lors du traitement:', error.response?.data?.message || error.message);
  }
}

// Ex√©cuter la correction
fixPermalinksAndImages();

