#!/usr/bin/env node

/**
 * CONTEXTUAL WIDGET PLACER
 * Utilise GPT-4o pour analyser le contenu et placer les widgets
 * de mani√®re contextuelle et humanis√©e avec FOMO doux
 */

import OpenAI from 'openai';
import { OPENAI_API_KEY } from './config.js';

class ContextualWidgetPlacer {
  constructor() {
    this.openai = new OpenAI({ apiKey: OPENAI_API_KEY });
    
    // Phrases d'accroche FOMO doux par type de widget
    this.accroches = {
      flights: [
        "Pour votre vol, on a compar√© les prix et trouv√© les meilleures offres du moment. R√©servez maintenant pour profiter des tarifs les plus bas :",
        "Voici les vols les moins chers que nous avons trouv√©s pour vous. Les places √† ces prix partent vite :",
        "On a d√©nich√© ces p√©pites pour votre vol. Profitez-en avant que les prix ne remontent :",
        "Comparez les prix des vols et r√©servez au meilleur moment. Nos partenaires vous garantissent les meilleurs tarifs :"
      ],
      hotels: [
        "Pour l'h√©bergement, voici les options les mieux not√©es par les nomades digitaux. Les places partent vite, surtout en haute saison :",
        "On a s√©lectionn√© ces h√©bergements pour leur excellent rapport qualit√©-prix. R√©servez maintenant pour garantir votre place :",
        "Voici o√π les autres nomades logent. Ces adresses sont tr√®s demand√©es, on vous conseille de r√©server rapidement :",
        "Comparez les h√©bergements et trouvez celui qui vous correspond. Les meilleurs deals sont ici :"
      ],
      insurance: [
        "Pour voyager l'esprit tranquille, voici les assurances les plus recommand√©es par la communaut√© nomade :",
        "Prot√©gez-vous avec une assurance adapt√©e. On a compar√© les offres pour vous :",
        "Ne partez pas sans assurance ! Voici les meilleures options pour les nomades digitaux :",
        "Comparez les assurances voyage et choisissez celle qui vous convient. La s√©curit√© avant tout :"
      ],
      transport: [
        "Pour vos d√©placements sur place, voici les meilleures options de transport :",
        "D√©couvrez comment vous d√©placer facilement une fois sur place :",
        "On a trouv√© les meilleurs moyens de transport locaux pour vous :",
        "Comparez les options de transport et r√©servez √† l'avance pour √©conomiser :"
      ]
    };
  }

  /**
   * Analyse le contenu et sugg√®re o√π placer les widgets
   */
  async analyzeAndPlaceWidgets(content, articleContext) {
    try {
      console.log('\nüéØ ANALYSE CONTEXTUELLE POUR PLACEMENT WIDGETS');
      console.log('==============================================\n');

      const prompt = `Tu es un expert en UX et content marketing pour un site de voyage.

MISSION: Analyser ce contenu d'article et d√©terminer O√ô placer les widgets de mani√®re contextuelle et naturelle.

ARTICLE:
${content}

CONTEXTE:
- Type: ${articleContext.type || 'T√©moignage'}
- Destination: ${articleContext.destination || 'Asie'}
- Audience: ${articleContext.audience || 'Nomades digitaux'}

WIDGETS DISPONIBLES:
1. FLIGHTS (vols)
2. HOTELS (h√©bergement)
3. INSURANCE (assurance)
4. TRANSPORT (transport local)

R√àGLES D'ANALYSE:
1. Identifie les sections (H2) qui parlent de:
   - Vols, transport a√©rien, "comment s'y rendre" ‚Üí FLIGHTS
   - Logement, h√©bergement, "o√π dormir" ‚Üí HOTELS
   - S√©curit√©, sant√©, formalit√©s ‚Üí INSURANCE
   - D√©placements locaux, mobilit√© ‚Üí TRANSPORT

2. Place le widget JUSTE APR√àS le paragraphe qui introduit le sujet
3. Maximum 3 widgets par article (les plus pertinents)
4. √âvite de mettre plusieurs widgets d'affil√©e

R√âPONSE EN JSON UNIQUEMENT (PAS DE TEXTE AVANT OU APR√àS):
{
  "placements": [
    {
      "widget_type": "flights",
      "after_text": "extrait exact du texte apr√®s lequel placer (20-50 caract√®res)",
      "reason": "pourquoi ce placement est pertinent",
      "priority": 1
    }
  ]
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON, rien d'autre. Commence directement par {`;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
        max_tokens: 1000,
        response_format: { type: "json_object" }
      });

      let responseText = response.choices[0].message.content.trim();
      
      // Nettoyer la r√©ponse si elle contient du markdown
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      }
      
      const analysis = JSON.parse(responseText);
      
      console.log(`‚úÖ ${analysis.placements.length} placements sugg√©r√©s\n`);
      
      analysis.placements.forEach((p, i) => {
        console.log(`${i + 1}. ${p.widget_type.toUpperCase()}`);
        console.log(`   Apr√®s: "${p.after_text}"`);
        console.log(`   Raison: ${p.reason}`);
        console.log(`   Priorit√©: ${p.priority}/3\n`);
      });

      return analysis.placements;

    } catch (error) {
      console.error('‚ùå Erreur analyse placement:', error.message);
      return [];
    }
  }

  /**
   * Ins√®re les widgets dans le contenu avec accroches humanis√©es
   */
  insertWidgetsContextually(content, placements, widgetScripts) {
    console.log('üìù INSERTION DES WIDGETS AVEC ACCROCHES\n');
    
    let updatedContent = content;
    let insertCount = 0;

    // Trier par priorit√© (1 = le plus important)
    const sortedPlacements = placements
      .sort((a, b) => a.priority - b.priority)
      .slice(0, 3); // Maximum 3 widgets

    sortedPlacements.forEach((placement, index) => {
      const widgetType = placement.widget_type;
      const widgetScript = widgetScripts[widgetType];

      if (!widgetScript) {
        console.log(`   ‚ö†Ô∏è Widget ${widgetType} non disponible`);
        return;
      }

      // Choisir une accroche al√©atoire
      const accroches = this.accroches[widgetType] || [];
      const accroche = accroches[Math.floor(Math.random() * accroches.length)];

      // Cr√©er le bloc widget avec accroche
      const widgetBlock = `

<p><strong>${accroche}</strong></p>

${widgetScript}

`;

      // Trouver le texte apr√®s lequel ins√©rer
      const searchText = placement.after_text;
      
      // Chercher le texte dans le contenu
      const textIndex = updatedContent.indexOf(searchText);
      
      if (textIndex !== -1) {
        // Trouver la fin du paragraphe (</p>)
        const endParagraph = updatedContent.indexOf('</p>', textIndex);
        
        if (endParagraph !== -1) {
          // Ins√©rer apr√®s le </p>
          updatedContent = 
            updatedContent.slice(0, endParagraph + 4) + 
            widgetBlock + 
            updatedContent.slice(endParagraph + 4);
          
          insertCount++;
          console.log(`   ‚úÖ Widget ${widgetType.toUpperCase()} ins√©r√©`);
          console.log(`      Apr√®s: "${searchText.substring(0, 40)}..."`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è Texte de r√©f√©rence non trouv√© pour ${widgetType}`);
      }
    });

    console.log(`\n‚úÖ ${insertCount} widgets ins√©r√©s dans le contenu\n`);

    return updatedContent;
  }

  /**
   * Processus complet: analyse + insertion
   */
  async placeWidgetsIntelligently(content, articleContext, widgetScripts) {
    try {
      // 1. Analyser et obtenir les placements sugg√©r√©s
      const placements = await this.analyzeAndPlaceWidgets(content, articleContext);

      if (placements.length === 0) {
        console.log('‚ö†Ô∏è Aucun placement sugg√©r√©, widgets non ins√©r√©s');
        return content;
      }

      // 2. Ins√©rer les widgets avec accroches
      const updatedContent = this.insertWidgetsContextually(
        content,
        placements,
        widgetScripts
      );

      return updatedContent;

    } catch (error) {
      console.error('‚ùå Erreur placement widgets:', error.message);
      return content;
    }
  }

  /**
   * G√©n√®re une accroche personnalis√©e selon le contexte
   */
  generateCustomAccroche(widgetType, context) {
    const templates = {
      flights: [
        `Pour votre vol vers ${context.destination}, on a trouv√© les meilleures offres. R√©servez maintenant :`,
        `Comparez les prix des vols pour ${context.destination} et √©conomisez jusqu'√† 30% :`,
        `Les nomades recommandent ces compagnies pour ${context.destination}. Profitez des meilleurs tarifs :`
      ],
      hotels: [
        `Voici o√π loger √† ${context.destination} selon les autres nomades. Les places partent vite :`,
        `On a s√©lectionn√© les meilleurs h√©bergements de ${context.destination} pour vous :`,
        `Comparez les logements √† ${context.destination} et r√©servez au meilleur prix :`
      ]
    };

    const options = templates[widgetType] || this.accroches[widgetType];
    return options[Math.floor(Math.random() * options.length)];
  }
}

export default ContextualWidgetPlacer;

