#!/usr/bin/env node

/**
 * CONTEXTUAL WIDGET PLACER
 * Utilise GPT-4o pour analyser le contenu et placer les widgets
 * de mani√®re contextuelle avec accroches sobres style The Points Guy
 */

import OpenAI from 'openai';
import { OPENAI_API_KEY } from './config.js';

class ContextualWidgetPlacer {
  constructor() {
    this.openai = new OpenAI({ apiKey: OPENAI_API_KEY });
    
    // Contextes + accroches style TPG (valeur ajout√©e + sobre)
    this.widgetIntros = {
      flights: [
        {
          context: "Selon notre analyse de milliers de vols vers l'Asie, r√©server 6 √† 8 semaines √† l'avance permet d'√©conomiser jusqu'√† 40% sur les billets. Notre outil compare les prix de 500+ compagnies en temps r√©el.",
          cta: "Comparez les prix et r√©servez :"
        },
        {
          context: "D'apr√®s notre exp√©rience avec des centaines de nomades, les vols en milieu de semaine (mardi-jeudi) sont en moyenne 25% moins chers. Notre partenaire Kiwi.com agr√®ge les tarifs de toutes les compagnies.",
          cta: "Trouvez les meilleures offres :"
        },
        {
          context: "Les prix des vols varient jusqu'√† 300‚Ç¨ selon le site de r√©servation. Notre outil compare automatiquement les tarifs pour vous garantir le meilleur prix.",
          cta: "Consultez les tarifs actuels :"
        }
      ],
      hotels: [
        {
          context: "Les nomades digitaux d√©pensent en moyenne 30% de leur budget en h√©bergement. Notre partenaire Hotellook compare les prix de 200+ sites de r√©servation pour vous aider √† √©conomiser.",
          cta: "Trouvez votre h√©bergement id√©al :"
        },
        {
          context: "D'apr√®s notre analyse de 1000+ r√©servations, les prix peuvent varier de 40% pour la m√™me chambre selon le site. Notre outil agr√®ge toutes les offres pour vous garantir le meilleur tarif.",
          cta: "Comparez les h√©bergements :"
        },
        {
          context: "Les colivings les mieux not√©s par les nomades se remplissent 3 semaines √† l'avance en haute saison. Notre outil vous permet de comparer et r√©server rapidement.",
          cta: "Consultez les disponibilit√©s :"
        }
      ]
    };
  }

  /**
   * Analyse le contenu et sugg√®re o√π placer les widgets
   */
  async analyzeAndPlaceWidgets(content, articleContext) {
    try {
      console.log('\nüéØ ANALYSE CONTEXTUELLE POUR PLACEMENT WIDGETS');
      console.log('==============================================\n');

      const prompt = `Tu es un expert en UX et content marketing pour un site de voyage.

MISSION: Analyser ce contenu d'article et d√©terminer O√ô placer les widgets de mani√®re contextuelle et naturelle.

ARTICLE:
${content}

CONTEXTE:
- Type: ${articleContext.type || 'T√©moignage'}
- Destination: ${articleContext.destination || 'Asie'}
- Audience: ${articleContext.audience || 'Nomades digitaux'}

WIDGETS DISPONIBLES (UNIQUEMENT CEUX-CI):
1. FLIGHTS (vols) - Formulaire de recherche Kiwi.com
2. HOTELS (h√©bergement) - Formulaire de recherche Hotellook

R√àGLES D'ANALYSE:
1. Identifie les sections (H2/H3) qui parlent de:
   - Vols, transport a√©rien, "comment s'y rendre", voyage, d√©placement ‚Üí FLIGHTS
   - Logement, h√©bergement, "o√π dormir", coliving, h√¥tel ‚Üí HOTELS

2. Place le widget JUSTE APR√àS le paragraphe qui introduit le sujet
3. Maximum 2 widgets par article (1 FLIGHTS + 1 HOTELS si pertinent)
4. √âvite de mettre plusieurs widgets d'affil√©e
5. NE SUGG√àRE QUE flights et hotels (pas insurance, pas transport)

R√âPONSE EN JSON UNIQUEMENT (PAS DE TEXTE AVANT OU APR√àS):
{
  "placements": [
    {
      "widget_type": "flights",
      "after_text": "extrait exact du texte apr√®s lequel placer (20-50 caract√®res)",
      "reason": "pourquoi ce placement est pertinent",
      "priority": 1
    }
  ]
}

IMPORTANT: R√©ponds UNIQUEMENT avec le JSON, rien d'autre. Commence directement par {`;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.3,
        max_tokens: 1000,
        response_format: { type: "json_object" }
      });

      let responseText = response.choices[0].message.content.trim();
      
      // Nettoyer la r√©ponse si elle contient du markdown
      if (responseText.startsWith('```json')) {
        responseText = responseText.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      }
      
      const analysis = JSON.parse(responseText);
      
      console.log(`‚úÖ ${analysis.placements.length} placements sugg√©r√©s\n`);
      
      analysis.placements.forEach((p, i) => {
        console.log(`${i + 1}. ${p.widget_type.toUpperCase()}`);
        console.log(`   Apr√®s: "${p.after_text}"`);
        console.log(`   Raison: ${p.reason}`);
        console.log(`   Priorit√©: ${p.priority}/3\n`);
      });

      return analysis.placements;

    } catch (error) {
      console.error('‚ùå Erreur analyse placement:', error.message);
      return [];
    }
  }

  /**
   * Ins√®re les widgets dans le contenu avec accroches humanis√©es
   */
  insertWidgetsContextually(content, placements, widgetScripts) {
    console.log('üìù INSERTION DES WIDGETS AVEC ACCROCHES\n');
    
    let updatedContent = content;
    let insertCount = 0;

    // Trier par priorit√© (1 = le plus important)
    const sortedPlacements = placements
      .sort((a, b) => a.priority - b.priority)
      .slice(0, 3); // Maximum 3 widgets

    sortedPlacements.forEach((placement, index) => {
      const widgetType = placement.widget_type;
      const widgetScript = widgetScripts[widgetType];

      if (!widgetScript) {
        console.log(`   ‚ö†Ô∏è Widget ${widgetType} non disponible`);
        return;
      }

      // Choisir une intro al√©atoire (contexte + CTA)
      const intros = this.widgetIntros[widgetType] || [];
      const intro = intros[Math.floor(Math.random() * intros.length)];

      // Cr√©er le bloc widget avec contexte + accroche style TPG
      const widgetBlock = `

<p>${intro.context}</p>

<p><strong>${intro.cta}</strong></p>

${widgetScript}

`;

      // Trouver le texte apr√®s lequel ins√©rer
      const searchText = placement.after_text;
      
      // Chercher le texte dans le contenu
      const textIndex = updatedContent.indexOf(searchText);
      
      if (textIndex !== -1) {
        // Trouver la fin du paragraphe (</p>)
        const endParagraph = updatedContent.indexOf('</p>', textIndex);
        
        if (endParagraph !== -1) {
          // Ins√©rer apr√®s le </p>
          updatedContent = 
            updatedContent.slice(0, endParagraph + 4) + 
            widgetBlock + 
            updatedContent.slice(endParagraph + 4);
          
          insertCount++;
          console.log(`   ‚úÖ Widget ${widgetType.toUpperCase()} ins√©r√©`);
          console.log(`      Apr√®s: "${searchText.substring(0, 40)}..."`);
        }
      } else {
        console.log(`   ‚ö†Ô∏è Texte de r√©f√©rence non trouv√© pour ${widgetType}`);
      }
    });

    console.log(`\n‚úÖ ${insertCount} widgets ins√©r√©s dans le contenu\n`);

    return updatedContent;
  }

  /**
   * Processus complet: analyse + insertion
   */
  async placeWidgetsIntelligently(content, articleContext, widgetScripts) {
    try {
      // 1. Analyser et obtenir les placements sugg√©r√©s
      const placements = await this.analyzeAndPlaceWidgets(content, articleContext);

      if (placements.length === 0) {
        console.log('‚ö†Ô∏è Aucun placement sugg√©r√©, widgets non ins√©r√©s');
        return content;
      }

      // 2. Ins√©rer les widgets avec accroches
      const updatedContent = this.insertWidgetsContextually(
        content,
        placements,
        widgetScripts
      );

      return updatedContent;

    } catch (error) {
      console.error('‚ùå Erreur placement widgets:', error.message);
      return content;
    }
  }

  /**
   * G√©n√®re une accroche personnalis√©e selon le contexte
   */
  generateCustomAccroche(widgetType, context) {
    // Style TPG: sobre et informatif
    const templates = {
      flights: [
        `Comparez les vols pour ${context.destination} :`,
        `Trouvez votre vol pour ${context.destination} :`,
        `Consultez les tarifs pour ${context.destination} :`
      ],
      hotels: [
        `Trouvez votre h√©bergement √† ${context.destination} :`,
        `Comparez les logements √† ${context.destination} :`,
        `Consultez les options √† ${context.destination} :`
      ]
    };

    const options = templates[widgetType] || this.accroches[widgetType];
    return options[Math.floor(Math.random() * options.length)];
  }
}

export default ContextualWidgetPlacer;

