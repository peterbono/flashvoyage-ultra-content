#!/usr/bin/env node

/**
 * ANALYSEUR S√âMANTIQUE LLM - IDENTIFIER LES OPPORTUNIT√âS DE LIENS INTERNES
 */

import OpenAI from 'openai';
import fs from 'fs';
import { AnchorTextValidator } from './anchor-text-validator.js';

class SemanticLinkAnalyzer {
  constructor(apiKey) {
    this.client = new OpenAI({ apiKey });
    this.articlesDatabase = null;
    this.anchorValidator = new AnchorTextValidator();
  }

  loadArticlesDatabase(filename = 'articles-database.json') {
    console.log(`üìö Chargement de la base de donn√©es: ${filename}`);
    
    try {
      const data = fs.readFileSync(filename, 'utf-8');
      this.articlesDatabase = JSON.parse(data);
      console.log(`‚úÖ ${this.articlesDatabase.total_articles} articles charg√©s\n`);
      return true;
    } catch (error) {
      console.error(`‚ùå Erreur lors du chargement: ${error.message}`);
      return false;
    }
  }

  async analyzeAndSuggestLinks(newArticleContent, newArticleTitle, maxLinks = 8, currentArticleId = null) {
    console.log('ü§ñ ANALYSE S√âMANTIQUE POUR LIENS INTERNES');
    console.log('==========================================\n');
    console.log(`üìù Article √† analyser: "${newArticleTitle}"`);
    console.log(`üéØ Objectif: Trouver ${maxLinks} liens internes pertinents\n`);

    if (!this.articlesDatabase) {
      throw new Error('Base de donn√©es non charg√©e. Appelez loadArticlesDatabase() d\'abord.');
    }

    // Pr√©parer la liste des articles disponibles pour le LLM
    // EXCLURE l'article en cours pour √©viter les autolinks
    const availableArticles = this.articlesDatabase.articles
      .filter(article => article.id !== currentArticleId)
      .map(article => ({
        id: article.id,
        title: article.title,
        url: article.url,
        excerpt: article.excerpt,
        categories: article.categories.map(c => c.name).join(', '),
        tags: article.tags.map(t => t.name).join(', ')
      }));
    
    console.log(`üìö Articles disponibles: ${availableArticles.length} (article ${currentArticleId} exclu)\n`);

    // Cr√©er le prompt pour Claude
    const prompt = this.createAnalysisPrompt(newArticleContent, newArticleTitle, availableArticles, maxLinks);

    console.log('üîÑ Envoi √† OpenAI pour analyse...\n');

    try {
      const response = await this.client.chat.completions.create({
        model: 'gpt-4o',
        max_tokens: 2000,
        temperature: 0.3,
        response_format: { type: "json_object" },
        messages: [{
          role: 'user',
          content: prompt
        }]
      });

      const analysis = JSON.parse(response.choices[0].message.content);
      
      console.log('‚úÖ ANALYSE TERMIN√âE\n');
      console.log(`üìä R√âSULTATS BRUTS:`);
      console.log(`  - Liens sugg√©r√©s: ${analysis.suggested_links.length}`);
      console.log(`  - Score de pertinence moyen: ${this.calculateAverageScore(analysis.suggested_links)}/10\n`);

      // Valider les ancres sugg√©r√©es
      const validation = this.anchorValidator.validateBatch(analysis.suggested_links);
      
      // Remplacer par les liens valides uniquement
      analysis.suggested_links = validation.valid;
      
      console.log(`üìä R√âSULTATS APR√àS VALIDATION:`);
      console.log(`  - Liens valides: ${validation.valid.length}`);
      console.log(`  - Liens rejet√©s: ${validation.invalid.length}\n`);

      return analysis;

    } catch (error) {
      console.error('‚ùå Erreur lors de l\'analyse:', error.message);
      throw error;
    }
  }

  createAnalysisPrompt(articleContent, articleTitle, availableArticles, maxLinks) {
    // Extraire des phrases cl√©s du contenu pour aider GPT √† trouver des ancres r√©elles
    const textContent = articleContent.replace(/<[^>]*>/g, ' ').substring(0, 3000);
    
    return `Tu es un expert SEO sp√©cialis√© dans les liens internes pour FlashVoyages.com, un site sur le nomadisme digital en Asie.

NOUVEL ARTICLE √Ä ANALYSER:
Titre: ${articleTitle}

Contenu (texte brut pour trouver les ancres):
${textContent}

ARTICLES DISPONIBLES POUR LIENS INTERNES:
${JSON.stringify(availableArticles, null, 2)}

TA MISSION:
Identifie les ${maxLinks} meilleurs opportunit√©s de liens internes pour cet article.

‚ö†Ô∏è R√àGLES CRITIQUES POUR LES ANCRES:
1. L'anchor_text DOIT √™tre un mot ou une phrase QUI EXISTE EXACTEMENT dans le contenu ci-dessus
2. V√©rifie que le texte de l'ancre est pr√©sent mot pour mot dans le contenu
3. Utilise des expressions courtes (2-5 mots maximum)
4. Privil√©gie les expressions compl√®tes plut√¥t que des mots isol√©s
5. NE PAS inventer d'ancres qui n'existent pas dans le texte

CRIT√àRES DE S√âLECTION:
1. Pertinence s√©mantique (m√™me sujet, destination similaire, th√©matique connexe)
2. Valeur ajout√©e pour le lecteur (compl√©ment d'information utile)
3. Diversit√© (ne pas sugg√©rer que des articles sur la m√™me destination)
4. Ancre existante (V√âRIFIE que le texte existe dans le contenu)

POUR CHAQUE LIEN SUGG√âR√â, FOURNIS:
- article_id: L'ID de l'article
- article_title: Le titre de l'article
- article_url: L'URL de l'article
- anchor_text: Le texte d'ancrage (DOIT exister dans le contenu ci-dessus)
- placement_context: O√π placer le lien (ex: "dans la section sur les co√ªts")
- relevance_score: Score de pertinence de 1 √† 10
- reasoning: Pourquoi ce lien est pertinent (1 phrase)

R√âPONDS UNIQUEMENT EN JSON VALIDE:
{
  "suggested_links": [
    {
      "article_id": 123,
      "article_title": "...",
      "article_url": "...",
      "anchor_text": "...",
      "placement_context": "...",
      "relevance_score": 8,
      "reasoning": "..."
    }
  ],
  "analysis_summary": "R√©sum√© de l'analyse en 2-3 phrases"
}`;
  }

  calculateAverageScore(links) {
    if (links.length === 0) return 0;
    const sum = links.reduce((acc, link) => acc + link.relevance_score, 0);
    return (sum / links.length).toFixed(1);
  }

  displayResults(analysis) {
    console.log('üìã LIENS INTERNES SUGG√âR√âS:');
    console.log('============================\n');

    analysis.suggested_links.forEach((link, index) => {
      console.log(`${index + 1}. ${link.article_title}`);
      console.log(`   Score: ${link.relevance_score}/10`);
      console.log(`   Ancre: "${link.anchor_text}"`);
      console.log(`   Contexte: ${link.placement_context}`);
      console.log(`   Raison: ${link.reasoning}`);
      console.log(`   URL: ${link.article_url}`);
      console.log('');
    });

    console.log('üí° R√âSUM√â:');
    console.log('==========');
    console.log(analysis.analysis_summary);
  }

  saveResults(analysis, filename = 'suggested-links.json') {
    console.log(`\nüíæ Sauvegarde des r√©sultats: ${filename}`);
    
    const data = {
      analyzed_at: new Date().toISOString(),
      total_suggestions: analysis.suggested_links.length,
      average_score: this.calculateAverageScore(analysis.suggested_links),
      ...analysis
    };

    fs.writeFileSync(filename, JSON.stringify(data, null, 2));
    console.log('‚úÖ R√©sultats sauvegard√©s');
  }
}

// Exporter la classe
export { SemanticLinkAnalyzer };

// Test si ex√©cut√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  console.log('‚ö†Ô∏è Pour tester, utilisez: node test-semantic-analyzer.js');
}
