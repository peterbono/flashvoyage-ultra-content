#!/usr/bin/env node

import dotenv from 'dotenv';
import axios from 'axios';

dotenv.config();

const WORDPRESS_URL = process.env.WORDPRESS_URL || 'https://flashvoyage.com/';
const WORDPRESS_USERNAME = process.env.WORDPRESS_USERNAME || 'admin7817';
const WORDPRESS_APP_PASSWORD = process.env.WORDPRESS_APP_PASSWORD || 'GjLl 9W0k lKwf LSOT PXur RYGR';
const PEXELS_API_KEY = process.env.PEXELS_API_KEY || 'qNCjwU6WA9168C8204HQ4V1sD8FsWtAyb6dfIrI0LRNRU9ntfMkhevmA';

console.log('üß™ Test de d√©ploiement FlashVoyages Ultra Content Generator\n');

async function testWordPressConnection() {
  console.log('1Ô∏è‚É£ Test de connexion WordPress...');
  try {
    const response = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/posts?per_page=1`, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      },
      timeout: 10000
    });
    console.log('‚úÖ WordPress connect√© avec succ√®s');
    console.log(`   üìä ${response.data.length} article(s) trouv√©(s)`);
    return true;
  } catch (error) {
    console.log('‚ùå Erreur connexion WordPress:', error.message);
    return false;
  }
}

async function testPexelsAPI() {
  console.log('\n2Ô∏è‚É£ Test de l\'API Pexels...');
  try {
    const response = await axios.get('https://api.pexels.com/v1/search', {
      params: {
        query: 'tokyo travel',
        per_page: 1
      },
      headers: {
        'Authorization': PEXELS_API_KEY
      },
      timeout: 10000
    });
    console.log('‚úÖ Pexels API fonctionne');
    console.log(`   üì∏ ${response.data.photos.length} image(s) trouv√©e(s)`);
    return true;
  } catch (error) {
    console.log('‚ùå Erreur Pexels API:', error.message);
    return false;
  }
}

async function testContentGeneration() {
  console.log('\n3Ô∏è‚É£ Test de g√©n√©ration de contenu...');
  try {
    // Simuler la g√©n√©ration d'un guide de quartier
    const content = {
      title: 'Test Tokyo : Shibuya comme un local - 7 spots secrets',
      content: '<h2>Test de contenu g√©n√©r√©</h2><p>Ceci est un test de g√©n√©ration de contenu.</p>',
      type: 'quartier_guide',
      destination: 'tokyo',
      quartier: 'shibuya'
    };
    console.log('‚úÖ G√©n√©ration de contenu simul√©e');
    console.log(`   üìù Titre: ${content.title}`);
    return true;
  } catch (error) {
    console.log('‚ùå Erreur g√©n√©ration contenu:', error.message);
    return false;
  }
}

async function testImageUpload() {
  console.log('\n4Ô∏è‚É£ Test d\'upload d\'image...');
  try {
    // Test avec une image de test
    const testImageUrl = 'https://images.pexels.com/photos/1007657/pexels-photo-1007657.jpeg?auto=compress&cs=tinysrgb&w=400&h=300&fit=crop';
    
    const imageResponse = await axios.get(testImageUrl, {
      responseType: 'arraybuffer',
      timeout: 10000
    });
    
    const formData = new FormData();
    const blob = new Blob([imageResponse.data], { type: 'image/jpeg' });
    formData.append('file', blob, 'test-image.jpg');
    
    const uploadResponse = await axios.post(`${WORDPRESS_URL}/wp-json/wp/v2/media`, formData, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      },
      headers: {
        'Content-Disposition': 'attachment; filename="test-image.jpg"',
        'Content-Type': 'image/jpeg'
      },
      timeout: 15000
    });
    
    console.log('‚úÖ Upload d\'image r√©ussi');
    console.log(`   üñºÔ∏è Image ID: ${uploadResponse.data.id}`);
    
    // Supprimer l'image de test
    await axios.delete(`${WORDPRESS_URL}/wp-json/wp/v2/media/${uploadResponse.data.id}?force=true`, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      }
    });
    console.log('   üóëÔ∏è Image de test supprim√©e');
    
    return true;
  } catch (error) {
    console.log('‚ùå Erreur upload image:', error.message);
    return false;
  }
}

async function testCategories() {
  console.log('\n5Ô∏è‚É£ Test des cat√©gories WordPress...');
  try {
    const response = await axios.get(`${WORDPRESS_URL}/wp-json/wp/v2/categories`, {
      auth: {
        username: WORDPRESS_USERNAME,
        password: WORDPRESS_APP_PASSWORD
      },
      timeout: 10000
    });
    
    const categories = response.data;
    const asiaCategories = categories.filter(cat => 
      cat.slug.includes('japon') || 
      cat.slug.includes('thailande') || 
      cat.slug.includes('coree') ||
      cat.slug.includes('asie')
    );
    
    console.log('‚úÖ Cat√©gories r√©cup√©r√©es');
    console.log(`   üìÇ ${categories.length} cat√©gorie(s) totale(s)`);
    console.log(`   üåè ${asiaCategories.length} cat√©gorie(s) Asie`);
    
    return true;
  } catch (error) {
    console.log('‚ùå Erreur cat√©gories:', error.message);
    return false;
  }
}

async function runAllTests() {
  console.log('üöÄ D√©marrage des tests de d√©ploiement...\n');
  
  const results = {
    wordpress: await testWordPressConnection(),
    pexels: await testPexelsAPI(),
    content: await testContentGeneration(),
    image: await testImageUpload(),
    categories: await testCategories()
  };
  
  console.log('\nüìä R√©sum√© des tests:');
  console.log('==================');
  
  Object.entries(results).forEach(([test, passed]) => {
    const status = passed ? '‚úÖ' : '‚ùå';
    const testName = {
      wordpress: 'WordPress',
      pexels: 'Pexels API',
      content: 'G√©n√©ration contenu',
      image: 'Upload image',
      categories: 'Cat√©gories'
    }[test];
    
    console.log(`${status} ${testName}`);
  });
  
  const allPassed = Object.values(results).every(result => result);
  
  if (allPassed) {
    console.log('\nüéâ Tous les tests sont pass√©s !');
    console.log('‚úÖ Votre syst√®me est pr√™t pour le d√©ploiement');
    console.log('\nüìã Prochaines √©tapes:');
    console.log('1. Cr√©er le repository GitHub');
    console.log('2. Configurer les secrets');
    console.log('3. Activer GitHub Actions');
    console.log('4. L\'automatisation se lancera automatiquement !');
  } else {
    console.log('\n‚ö†Ô∏è Certains tests ont √©chou√©');
    console.log('‚ùå V√©rifiez la configuration avant le d√©ploiement');
  }
  
  return allPassed;
}

// Ex√©cuter les tests
runAllTests().catch(console.error);
